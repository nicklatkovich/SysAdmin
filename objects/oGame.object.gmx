<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
map_width = 10;
map_height = 10;
map = scr_maze_generate(map_width, map_height, 1, 1);

enum OBJS {
    null,
    comp,
    hub
};

objs = ds_grid_create(map_width, map_height);
ways = ds_grid_create(map_width, map_height);

var cross_num = 0;
for (var i = 0; i &lt; map_width; i++) {
    for (var j = 0; j &lt; map_height; j++) {
        
        var way = instance_create(0, 0, oWay);
        way.state = ds_grid_get(map, i, j);
        ds_grid_set(ways, i, j, way);
        
        var l = dl(way.state);
        if (l == 1) {
            ds_grid_set(objs, i, j, OBJS.comp);
        } else {
        /*
            ds_grid_set(objs, i, j, OBJS.null);
            if (l == 4) {
                cross_num++;
            }
        */
            if (l == 4) {
                ds_grid_set(objs, i, j, OBJS.hub);
            } else {
                ds_grid_set(objs, i, j, OBJS.null);
            }
        }
    }
}

/*
if (cross_num &gt; 0) {
    var cur_cross = rand(cross_num);
    for (var i = 0; i &lt; map_width; i++) {
        for (var j = 0; j &lt; map_height; j++) {
            var l = dl(ds_grid_get(map, i, j));
            if (l == 4) {
                cur_cross--;
                if (cur_cross &lt; 0) {
                    ds_grid_set(objs, i, j, OBJS.hub);
                    j = MAX_UINT;
                    i = MAX_UINT;
                }
            }
        }
    }
}
*/

dis_w = -1;
dis_h = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ds_grid_destroy(map);
ds_grid_destroy(objs);
ds_grid_destroy(ways);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (dis_w != oAppSurf.dis_w || dis_h != oAppSurf.dis_h) {
    dis_w = oAppSurf.dis_w;
    dis_h = oAppSurf.dis_h;

    if (map_width / map_height &gt; dis_w / dis_h) {
        cell_size = dis_w / map_width;
    } else {
        cell_size = dis_h / map_height;
    }
    
    half_cell_size = cell_size / 2;
    line_length = cell_size * 0.7;
    
    xx = (dis_w - cell_size * map_width) / 2;
    yy = (dis_h - cell_size * map_height) / 2;
    
    for (var i = 0; i &lt; map_width; i++) {
        var x2 = (i + 0.5) * cell_size + xx;
        for (var j = 0; j &lt; map_height; j++) {
            var y2 = (j + 0.5) * cell_size + yy;
            var way = ds_grid_get(ways, i, j);
            way.x = x2;
            way.y = y2;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var cell_size, xx, yy;

if (map_width / map_height &gt; oAppSurf.dis_w / oAppSurf.dis_h) {
    cell_size = oAppSurf.dis_w / map_width;
} else {
    cell_size = oAppSurf.dis_h / map_height;
}

var half_cell_size = cell_size / 2;
var line_length = cell_size * 0.7;

xx = (oAppSurf.dis_w - cell_size * map_width) / 2;
yy = (oAppSurf.dis_h - cell_size * map_height) / 2;

/// Grid Drawing
/*
var grid_line_width = cell_size div 16;
for (var i = 0; i &lt;= map_width; i++) {
    var x1 = xx + i * cell_size;
    draw_line_width(x1, yy, x1, yy + cell_size * map_height, grid_line_width);
}

for (var i = 0; i &lt;= map_height; i++) {
    var y1 = yy + i * cell_size;
    draw_line_width(xx, y1, xx + cell_size * map_width, y1, grid_line_width);
}
*/

/// Cell Drawing
/*
draw_set_color(c_green);
for (var i = 0; i &lt; map_width; i++) {
    var x2 = i * cell_size + xx;
    var x1 = x2 + half_cell_size;
    for (var j = 0; j &lt; map_height; j++) {
        var y2 = j * cell_size + yy;
        var y1 = y2 + half_cell_size;
        var cell = ds_grid_get(map, i, j);
        if (cell != CROSS_CELL) {
            for (var d = 0; d &lt; 4; d++) {
                if (cell % ds(d) == 0) {
                    draw_line_width(x1, y1, x1 + dx(d) * line_length, y1 + dy(d) * line_length, 4);
                }
            }
        }
    }
}
*/

for (var i = 0; i &lt; map_width; i++) {
    var x2 = i * cell_size + xx;
    for (var j = 0; j &lt; map_height; j++) {
        var y2 = j * cell_size + yy;
        var obj = ds_grid_get(objs, i, j);
        if (obj == OBJS.comp) {
            draw_sprite_stretched(sComp, 0, x2, y2, cell_size, cell_size);
        } else if (obj == OBJS.hub) {
            draw_sprite_stretched(sHub, 0, x2, y2, cell_size, cell_size);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
