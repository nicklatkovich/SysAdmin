<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
drag = false;
mx_prev = 0;
my_prev = 0;

dis_w = -1;
dis_h = -1;

drag_x = 0;
drag_y = 0;

_mb = create_matherBoard(21, 12, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make way strong

if (point_distance(0, 0, drag_x, drag_y) &lt; tap_length) {
    var cell_state = ds_grid_get(_mb.map, mx, my);
    if (cell_state % CELL_STRONG == 0) {
        cell_state /= CELL_STRONG;
    } else {
        cell_state *= CELL_STRONG;
    }
    ds_grid_set(_mb.map, mx, my, cell_state);
    var way = ds_grid_get(_mb.ways, mx, my);
    way.state = cell_state;
    _mb.need_draw = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (dis_w != oAppSurf.dis_w || dis_h != oAppSurf.dis_h) {
    dis_w = oAppSurf.dis_w;
    dis_h = oAppSurf.dis_h;
    var cell_size;

    if (_mb.map_width / _mb.map_height &gt; dis_w / dis_h) {
        cell_size = dis_w / _mb.map_width;
    } else {
        cell_size = dis_h / _mb.map_height;
    }
    
    matherBoard_resize(_mb, cell_size);
    
    tap_length = _mb.cell_size / 2;
    _mb.xx = (dis_w - _mb.cell_size * _mb.map_width) / 2 mod _mb.map_w;
    _mb.yy = (dis_h - _mb.cell_size * _mb.map_height) / 2 mod _mb.map_h;
}

mcx = window_mouse_get_x();
mcy = window_mouse_get_y();

mx = (mcx + _mb.map_w - _mb.xx) mod _mb.map_w div _mb.cell_size;
my = (mcy + _mb.map_h - _mb.yy) mod _mb.map_h div _mb.cell_size;

if (mouse_check_button_pressed(mb_left)) {
    mx_prev = mcx;
    my_prev = mcy;
    drag = true;
    alarm[0] = room_speed;
} else if (mouse_check_button_released(mb_left) &amp;&amp; drag) {
    alarm[0] = -1;
    if (point_distance(0, 0, drag_x, drag_y) &lt; tap_length) {
        rotate_cell(_mb, mx, my, 3);
    }
    drag = false;
    drag_x = 0;
    drag_y = 0;
}

if (drag) {
    var drag_dx = mcx - mx_prev;
    var drag_dy = mcy - my_prev;
    move_matherBoard(_mb, drag_dx, drag_dy);
    drag_x += abs(drag_dx);
    drag_y += abs(drag_dy);
}

mx_prev = mcx;
my_prev = mcy;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var mouse_state = "";
mouse_state += "mx = " + string(mx) + "#";
mouse_state += "my = " + string(my) + "#";
draw_text(0, 16, mouse_state);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
