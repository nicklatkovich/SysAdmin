<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
map_width = 10;
map_height = 10;
map = scr_maze_generate(map_width, map_height, 1, 1, true);

enum OBJS {
    null,
    comp,
    hub
};

objs = ds_grid_create(map_width, map_height);
ways = ds_grid_create(map_width, map_height);

xx = 0;
yy = 0;
drag = false;
mx_prev = 0;
my_prev = 0;

map_surf = -1;

var cross_num = 0;
for (var i = 0; i &lt; map_width; i++) {
    for (var j = 0; j &lt; map_height; j++) {
        var ds_get = ds_grid_get(map, i, j);
        if (ds_get &gt; 0) {
            var way = instance_create(0, 0, oWay);
            way.state = ds_get;
            way.dl_state = dl(way.state);
            ds_grid_set(ways, i, j, way);
            
            var l = dl(way.state);
            if (l == 1) {
                ds_grid_set(objs, i, j, OBJS.comp);
            } else {
            /*
                ds_grid_set(objs, i, j, OBJS.null);
                if (l == 4) {
                    cross_num++;
                }
            */
                if (l == 4) {
                    ds_grid_set(objs, i, j, OBJS.hub);
                } else {
                    ds_grid_set(objs, i, j, OBJS.null);
                }
            }
        }
    }
}

/*
if (cross_num &gt; 0) {
    var cur_cross = rand(cross_num);
    for (var i = 0; i &lt; map_width; i++) {
        for (var j = 0; j &lt; map_height; j++) {
            var l = dl(ds_grid_get(map, i, j));
            if (l == 4) {
                cur_cross--;
                if (cur_cross &lt; 0) {
                    ds_grid_set(objs, i, j, OBJS.hub);
                    j = MAX_UINT;
                    i = MAX_UINT;
                }
            }
        }
    }
}
*/

dis_w = -1;
dis_h = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ds_grid_destroy(map);
ds_grid_destroy(objs);
ds_grid_destroy(ways);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (dis_w != oAppSurf.dis_w || dis_h != oAppSurf.dis_h) {
    dis_w = oAppSurf.dis_w;
    dis_h = oAppSurf.dis_h;

    if (map_width / map_height &gt; dis_w / dis_h) {
        cell_size = dis_w / map_width;
    } else {
        cell_size = dis_h / map_height;
    }
    
    half_cell_size = cell_size / 2;
    line_length = cell_size * 0.7;
    map_w = map_width * cell_size;
    map_h = map_height * cell_size;
    xx = (dis_w - cell_size * map_width) / 2 mod map_w;
    yy = (dis_h - cell_size * map_height) / 2 mod map_h;
    
    for (var i = 0; i &lt; map_width; i++) {
        var x2 = (i + 0.5) * cell_size;
        for (var j = 0; j &lt; map_height; j++) {
            var y2 = (j + 0.5) * cell_size;
            var way = ds_grid_get(ways, i, j);
            way.x = x2;
            way.y = y2;
        }
    }
    
    spr_scale = cell_size / sprite_get_width(sWay);
}

if (mouse_check_button_pressed(mb_right)) {
    drag = true;
} else if (mouse_check_button_released(mb_right)) {
    drag = false;
}

if (drag) {
    xx += mouse_x - mx_prev;
    yy += mouse_y - my_prev;
    if (xx &lt; 0) {
        xx = abs(xx);
        xx = map_w - xx;
    } else if (xx &gt;= map_w) {
        xx = xx mod map_w;
    }
    if (yy &lt; 0) {
        yy = abs(yy);
        yy = map_h - yy;
    } else if (yy &gt;= map_h) {
        yy = yy mod map_h;
    }
}

mx_prev = mouse_x;
my_prev = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (surface_exists(map_surf) == false) {
    map_surf = surface_create(map_w, map_h);
    
    var sc = spr_scale;
    
    surface_set_target(map_surf);
    with (oWay) {
        if (state == CROSS_CELL) {
            draw_sprite_ext(sHub, 0, x, y, sc, sc, 0, c_white, 1);
        } else {
            draw_sprite_ext(sWay, ad(state), x, y, sc, sc, 0, c_green, 1);
            if (dl(state) == 1) {
                draw_sprite_ext(sComp, 0, x, y, sc, sc, 0, c_ltgray, 1);
            }
        }
    }
    surface_reset_target();
}

var draw_x = xx;
var draw_y = yy;
var dis_w = oAppSurf.dis_w;
var dis_h = oAppSurf.dis_h;
if (draw_x &gt; 0) {
    draw_x -= map_w;
}
if (draw_y &gt; 0) {
    draw_y -= map_h;
}
for (var ddx = draw_x; ddx &lt; dis_w; ddx += map_w) {
    for (var ddy = draw_y; ddy &lt; dis_h; ddy += map_h) {
        draw_surface(map_surf, ddx, ddy);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
